# üß™ Prueba T√©cnica ‚Äî Customers, Products & Orders (Node + MySQL + Docker Compose)

Este proyecto levanta **3 servicios** principales:

- **üßç Customers API** ‚Äî puerto **3001**
- **üì¶ Products & Orders API** ‚Äî puerto **3002**
- **üóÑÔ∏è MySQL** ‚Äî puerto **3306**, con la base de datos `B2B`

Incluye **OpenAPI** (`docs/openapi.yaml`) y ejemplos **cURL** para probar todas las rutas.

---

## üß© Requisitos

- Docker y Docker Compose
- (Opcional) Node 22+ y npm si deseas correr local sin Docker
- Puertos libres: **3001**, **3002**, **3306**

> üí° Si no usas seeds autom√°ticos, crea la DB y tablas con tus scripts `/db/` o carga manualmente.

---

## ‚öôÔ∏è Variables de entorno

Crea un archivo `.env` en la ra√≠z o usa las variables por defecto del `docker-compose.yml`:

```env
DB_PASSWORD=root
DB_NAME=B2B
SERVICE_TOKEN=service-secret
```

Los servicios consumen estas variables (ya definidas en `docker-compose.yml`):

```
DB_HOST=db               # dentro de la red de Docker
DB_PORT=3306
DB_USER=root
DB_PASSWORD=root
DB_NAME=B2B
CUSTOMERS_PORT=3001
PRODUCTS_PORT=3002
SERVICE_TOKEN=
SERVICE_TOKEN=mPTeRurtXx76WP5m7qo6amXvAU6Cbkonig0hVLdR1PVbQ6op0ID0F11s   # para /internal y Orders‚ÜíCustomers 
```

---

## üöÄ Levantar con Docker Compose

```bash
# desde la ra√≠z del repo
docker compose up --build -d
```

### üîç Ver logs

```bash
docker compose logs -f db
docker compose logs -f customers
docker compose logs -f products
```

### üßπ Apagar y limpiar vol√∫menes (incluye datos de MySQL)

```bash
docker compose down -v
```

---

## üå± Seeds autom√°ticos (opcional)

Si tienes `db/01_schema.sql` y `db/02_seed.sql`, aseg√∫rate de que el servicio `db` en `docker-compose.yml` tenga:

```yaml
volumes:
  - mysql_data:/var/lib/mysql
  - ./db:/docker-entrypoint-initdb.d:ro
```

> üß† Se ejecuta solo la primera vez que el volumen est√° vac√≠o.  
> Para re-ejecutar:  
> `docker compose down -v && docker compose up -d`

---

## üß™ Healthchecks r√°pidos

```bash
curl http://localhost:3001/health    # Customers
curl http://localhost:3002/health    # Products & Orders
```

---

## üîå cURL ‚Äî Customers API (3001)

### Crear cliente

```bash
curl -X POST http://localhost:3001/customers   -H "Content-Type: application/json"   -d '{"name":"Juan P√©rez","email":"juan.perez@example.com","phone":"+51 987654321"}'
```

### Obtener detalle

```bash
curl http://localhost:3001/customers/1
```

### Listar (b√∫squeda + paginaci√≥n por offset)

```bash
curl "http://localhost:3001/customers?search=juan&cursor=0&limit=10"
```

### Actualizar

```bash
curl -X PUT http://localhost:3001/customers/1   -H "Content-Type: application/json"   -d '{"name":"Juan P.","phone":"+51 123 456"}'
```

### Eliminar (204)

```bash
curl -X DELETE http://localhost:3001/customers/1 -i
```

### Internal (requiere token)

```bash
curl http://localhost:3001/internal/customers/1   -H "Authorization: Bearer mPTeRurtXx76WP5m7qo6amXvAU6Cbkonig0hVLdR1PVbQ6op0ID0F11s"
```

---

## üì¶ cURL ‚Äî Products API (3002)

### Crear producto

```bash
curl -X POST http://localhost:3002/products   -H "Content-Type: application/json"   -d '{"sku":"SKU-001","name":"Widget A","price_cents":129900,"stock":50}'
```

### Obtener detalle

```bash
curl http://localhost:3002/products/1
```

### Listar (b√∫squeda + paginaci√≥n por offset)

```bash
curl "http://localhost:3002/products?search=SKU-001&cursor=0&limit=10"
```

### Actualizar (PATCH: precio/stock)

```bash
curl -X PATCH http://localhost:3002/products/1   -H "Content-Type: application/json"   -d '{"price_cents":139900,"stock":60}'
```

---

## üßæ cURL ‚Äî Orders API (3002)

### Crear orden

```bash
curl -X POST http://localhost:3002/orders   -H "Content-Type: application/json"   -d '{
    "customer_id": 1,
    "items": [
      { "product_id": 1, "qty": 2 },
      { "product_id": 3, "qty": 1 }
    ]
  }'
```

### Obtener detalle (incluye items)

```bash
curl http://localhost:3002/orders/1
```

### Listar (filtros opcionales)

```bash
curl "http://localhost:3002/orders?status=CREATED&from=2025-01-01T00:00:00Z&to=2025-12-31T23:59:59Z&cursor=0&limit=20"
```

### Confirmar (idempotente)

```bash
curl -X POST http://localhost:3002/orders/1/confirm   -H "X-Idempotency-Key: a1b2c3-confirm-001"
```

> üîÅ Repite el mismo comando con la misma key y ver√°s el mismo resultado.

### Cancelar (reglas)

- **CREATED** ‚Üí cancela y restaura stock  
- **CONFIRMED** ‚Üí permite cancelar si han pasado ‚â§ 10 min desde `created_at`

```bash
curl -X POST http://localhost:3002/orders/1/cancel
```

---


### Orquestador (reglas)

- **CREATED** ‚Üí Realiza confirmaci√≥n autom√°ticamente  
- **CONFIRMED** ‚Üí permite confirmar una nueva oorden.

```bash
curl --location 'http://localhost:3000/orchestrator/create-and-confirm-order' \
--header 'Content-Type: application/json' \
--data '{
    "customer_id": 1,
    "items": [
      { "product_id": 2, "qty": 3 },
      { "product_id": 1, "qty": 3 }
    ],
    "idempotency_key": "ack-3sdada43",
    "correlation_id": "req-689"
  }'
```
**Criterios a considerar:**
si se repite el mismo request con el mismo `idempotency_key`, genera una excepci√≥n.
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <title>Error</title>
</head>

<body>
    <pre>Internal Server Error</pre>
</body>

</html>
---

## üìò OpenAPI

La especificaci√≥n est√° en `docs/openapi.yaml` con Customers (3001) y Products & Orders (3002).  
Puedes abrirla en **Swagger UI**, **Redoc**, o importarla en **Postman / Insomnia**.

---

## üõ†Ô∏è Troubleshooting

### Contenedores `customers_api` o `products_api` salen con `Exited (1)`

Revisa logs:

```bash
docker compose logs -f customers
docker compose logs -f products
```

### Errores t√≠picos

- `ERR_MODULE_NOT_FOUND: morgan` ‚Üí aseg√∫rate de que **morgan** est√© en dependencies (no dev). Reconstruye con `--no-cache`.
- `Cannot use import statement` ‚Üí falta `"type": "module"` en `package.json`.
- `ECONNREFUSED` a MySQL ‚Üí dentro de Docker usa `DB_HOST=db` (no `localhost`).

### Seeds no se ejecutan

Solo corren la primera vez con volumen vac√≠o.  
Para reintentar:

```bash
docker compose down -v
docker compose up --build -d
```

### `req.body` undefined

Verifica:
- `app.use(express.json())` antes de montar rutas
- Requests con `Content-Type: application/json` y JSON v√°lido

---

## üßπ Comandos √∫tiles

```bash
# reconstruir im√°genes limpias
docker compose build --no-cache

# reiniciar solo un servicio
docker compose up -d --no-deps --build customers
docker compose up -d --no-deps --build products

# entrar a un contenedor
docker compose exec customers sh
docker compose exec products sh
docker compose exec db sh
```

---

## üìÑ Licencia

**MIT** ‚Äî √∫salo libremente para tu prueba t√©cnica.
